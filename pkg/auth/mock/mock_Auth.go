// Code generated by mockery v2.3.0. DO NOT EDIT.

package auth

import (
	"deall/pkg/auth"

	mock "github.com/stretchr/testify/mock"
)

// MockAuth is an autogenerated mock type for the Auth type
type MockAuth struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: userID, tokenDetails
func (_m *MockAuth) CreateAuth(userID string, tokenDetails *auth.TokenDetails) error {
	ret := _m.Called(userID, tokenDetails)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *auth.TokenDetails) error); ok {
		r0 = rf(userID, tokenDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRefresh provides a mock function with given fields: refreshUUID
func (_m *MockAuth) DeleteRefresh(refreshUUID string) error {
	ret := _m.Called(refreshUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(refreshUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteToken provides a mock function with given fields: accessDetail
func (_m *MockAuth) DeleteToken(accessDetail *auth.AccessDetails) error {
	ret := _m.Called(accessDetail)

	var r0 error
	if rf, ok := ret.Get(0).(func(*auth.AccessDetails) error); ok {
		r0 = rf(accessDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAuth provides a mock function with given fields: tokenUUID
func (_m *MockAuth) FetchAuth(tokenUUID string) (string, error) {
	ret := _m.Called(tokenUUID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tokenUUID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
