// Code generated by mockery v2.3.0. DO NOT EDIT.

package cache

import mock "github.com/stretchr/testify/mock"

// MockRedisCommand is an autogenerated mock type for the RedisCommand type
type MockRedisCommand struct {
	mock.Mock
}

// Del provides a mock function with given fields: key
func (_m *MockRedisCommand) Del(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Expire provides a mock function with given fields: key, ttl
func (_m *MockRedisCommand) Expire(key string, ttl int) error {
	ret := _m.Called(key, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(key, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: key
func (_m *MockRedisCommand) Get(key string) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value
func (_m *MockRedisCommand) Set(key string, value string) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetEx provides a mock function with given fields: key, ttl, value
func (_m *MockRedisCommand) SetEx(key string, ttl int64, value string) error {
	ret := _m.Called(key, ttl, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, string) error); ok {
		r0 = rf(key, ttl, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
